{"ast":null,"code":"class SearchAndFilter {\n  searchAndFilter(courses, search, subject, minimumCredits, maximumCredits, interestArea) {\n    if (interestArea !== 'All') {\n      let coursesAfterSearch = [];\n\n      for (const course of courses) {\n        for (const keyword of course.keywords) {\n          if (keyword.includes(interestArea)) {\n            coursesAfterSearch.push(course);\n            break;\n          }\n        }\n      }\n\n      courses = coursesAfterSearch;\n    }\n\n    if (subject !== '' && search !== null, interestArea !== '') {\n      let coursesAfterSearch = [];\n\n      for (const course of courses) {\n        for (const keyword of course.keywords) {\n          if (keyword.includes(search)) {\n            coursesAfterSearch.push(course);\n            break;\n          }\n        }\n      }\n\n      courses = coursesAfterSearch;\n    }\n\n    if (subject !== 'All') {\n      let coursesAfterSubject = [];\n\n      for (const course of courses) {\n        if (course.subject === subject) coursesAfterSubject.push(course);\n      }\n\n      courses = coursesAfterSubject;\n    }\n\n    if (minimumCredits !== '') {\n      let coursesAfterMinimumCredits = [];\n\n      for (const course of courses) {\n        if (course.credits >= parseInt(minimumCredits)) coursesAfterMinimumCredits.push(course);\n      }\n\n      courses = coursesAfterMinimumCredits;\n    }\n\n    if (maximumCredits !== '') {\n      let coursesAfterMaximumCredits = [];\n\n      for (const course of courses) {\n        if (course.credits <= parseInt(maximumCredits)) coursesAfterMaximumCredits.push(course);\n      }\n\n      courses = coursesAfterMaximumCredits;\n    }\n\n    return courses;\n  }\n\n}\n\nexport default SearchAndFilter;","map":{"version":3,"sources":["/Users/kunlunwang/Documents/GitHub/3DModeling/react2-alpha-kunlunW/src/SearchAndFilter.js"],"names":["SearchAndFilter","searchAndFilter","courses","search","subject","minimumCredits","maximumCredits","interestArea","coursesAfterSearch","course","keyword","keywords","includes","push","coursesAfterSubject","coursesAfterMinimumCredits","credits","parseInt","coursesAfterMaximumCredits"],"mappings":"AAAA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,eAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,cAA3B,EAA2CC,cAA3C,EAA2DC,YAA3D,EAAyE;AAItF,QAAGA,YAAY,KAAK,KAApB,EAA2B;AACzB,UAAIC,kBAAkB,GAAG,EAAzB;;AAEA,WAAI,MAAMC,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,aAAI,MAAMQ,OAAV,IAAqBD,MAAM,CAACE,QAA5B,EACA;AACE,cAAGD,OAAO,CAACE,QAAR,CAAiBL,YAAjB,CAAH,EAAkC;AAClCC,YAAAA,kBAAkB,CAACK,IAAnB,CAAwBJ,MAAxB;AACA;AACC;AACF;AACF;;AACDP,MAAAA,OAAO,GAAGM,kBAAV;AACD;;AAGD,QAAGJ,OAAO,KAAK,EAAZ,IAAkBD,MAAM,KAAK,IAA7B,EAAmCI,YAAY,KAAK,EAAvD,EAA2D;AACzD,UAAIC,kBAAkB,GAAG,EAAzB;;AAEA,WAAI,MAAMC,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,aAAI,MAAMQ,OAAV,IAAqBD,MAAM,CAACE,QAA5B,EACA;AACE,cAAGD,OAAO,CAACE,QAAR,CAAiBT,MAAjB,CAAH,EAA4B;AAC5BK,YAAAA,kBAAkB,CAACK,IAAnB,CAAwBJ,MAAxB;AACA;AACC;AACF;AACF;;AACDP,MAAAA,OAAO,GAAGM,kBAAV;AACD;;AAGD,QAAGJ,OAAO,KAAK,KAAf,EAAsB;AACpB,UAAIU,mBAAmB,GAAG,EAA1B;;AAEA,WAAI,MAAML,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACL,OAAP,KAAmBA,OAAtB,EACEU,mBAAmB,CAACD,IAApB,CAAyBJ,MAAzB;AACH;;AACDP,MAAAA,OAAO,GAAGY,mBAAV;AACD;;AAED,QAAGT,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIU,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMN,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACO,OAAP,IAAkBC,QAAQ,CAACZ,cAAD,CAA7B,EACEU,0BAA0B,CAACF,IAA3B,CAAgCJ,MAAhC;AACH;;AACDP,MAAAA,OAAO,GAAGa,0BAAV;AACD;;AAED,QAAGT,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIY,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMT,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACO,OAAP,IAAkBC,QAAQ,CAACX,cAAD,CAA7B,EACEY,0BAA0B,CAACL,IAA3B,CAAgCJ,MAAhC;AACH;;AACDP,MAAAA,OAAO,GAAGgB,0BAAV;AACD;;AAED,WAAOhB,OAAP;AACD;;AApEmB;;AAuEtB,eAAeF,eAAf","sourcesContent":["class SearchAndFilter {\r\n  searchAndFilter(courses, search, subject, minimumCredits, maximumCredits, interestArea) {\r\n\r\n  \r\n\r\n    if(interestArea !== 'All') {\r\n      let coursesAfterSearch = [];\r\n\r\n      for(const course of courses) {\r\n        for(const keyword of course.keywords)\r\n        {\r\n          if(keyword.includes(interestArea)){\r\n          coursesAfterSearch.push(course);\r\n          break;\r\n          }\r\n        } \r\n      }\r\n      courses = coursesAfterSearch;\r\n    }\r\n\r\n\r\n    if(subject !== '' && search !== null, interestArea !== '') {\r\n      let coursesAfterSearch = [];\r\n\r\n      for(const course of courses) {\r\n        for(const keyword of course.keywords)\r\n        {\r\n          if(keyword.includes(search)){\r\n          coursesAfterSearch.push(course);\r\n          break;\r\n          }\r\n        } \r\n      }\r\n      courses = coursesAfterSearch;\r\n    }\r\n\r\n\r\n    if(subject !== 'All') {\r\n      let coursesAfterSubject = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.subject === subject)\r\n          coursesAfterSubject.push(course);\r\n      }\r\n      courses = coursesAfterSubject;\r\n    }\r\n\r\n    if(minimumCredits !== '') {\r\n      let coursesAfterMinimumCredits = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.credits >= parseInt(minimumCredits))\r\n          coursesAfterMinimumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMinimumCredits;\r\n    }\r\n\r\n    if(maximumCredits !== '') {\r\n      let coursesAfterMaximumCredits = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.credits <= parseInt(maximumCredits))\r\n          coursesAfterMaximumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMaximumCredits;\r\n    }\r\n\r\n    return courses;\r\n  }\r\n}\r\n\r\nexport default SearchAndFilter;\r\n\r\n"]},"metadata":{},"sourceType":"module"}