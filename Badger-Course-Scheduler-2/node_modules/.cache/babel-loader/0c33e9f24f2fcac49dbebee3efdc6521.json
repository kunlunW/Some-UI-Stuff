{"ast":null,"code":"class Cart {\n  addCourse(key, classData, cartList, secK, subsecK) {\n    if (secK === \"0\") {\n      cartList[key] = classData;\n    } else if (subsecK === \"0\") {\n      var s = classData.sections;\n\n      for (const sec of Object.entries(s)) {\n        if (secK === sec[0]) {\n          let classExist = false;\n\n          for (const classes of Object.entries(cartList)) {\n            if (key === classes[0]) {\n              classExist = true;\n              var jstring = JSON.stringify(classes[1]);\n              let JSParsedInfo = JSON.parse(jstring);\n              JSParsedInfo.sections[secK] = sec[1];\n              cartList[key] = JSParsedInfo;\n              break;\n            }\n          }\n\n          if (!classExist) {\n            var jstring = JSON.stringify(classData);\n            let JSParsedInfo = JSON.parse(jstring);\n            JSParsedInfo.sections = {};\n            JSParsedInfo.sections[secK] = sec[1];\n            cartList[key] = JSParsedInfo;\n          }\n        }\n      }\n    } else {\n      let secKey = secK.key;\n      var d = classData.sections[secKey].subsections;\n\n      for (const sub of Object.entries(d)) {\n        if (subsecK === sub[0]) {\n          let classExist = false;\n          let secFound = false;\n\n          for (const classes of Object.entries(cartList)) {\n            if (key === classes[0]) {\n              classExist = true;\n              var secs = classes[1].sections;\n\n              for (const sec of Object.entries(secs)) {\n                if (secKey === sec[0]) {\n                  secFound = true;\n                  var jstring = JSON.stringify(sec[1]);\n                  let JSParsedInfo = JSON.parse(jstring);\n                  JSParsedInfo.subsections[subsecK] = sub[1];\n                  cartList[key].sections[secKey] = JSParsedInfo;\n                  break;\n                }\n              }\n\n              if (!secFound) {\n                var jstring = JSON.stringify(classes[1]);\n                let secInformation = JSON.parse(jstring);\n                secInformation.sections[secKey] = classData.sections[secKey];\n                cartList[key] = secInformation;\n                var secNum = cartList[key].sections[secKey];\n                var secInfo = JSON.stringify(secNum);\n                let JSParsedInfo = JSON.parse(secInfo);\n                JSParsedInfo.subsections = {};\n                JSParsedInfo.subsections[subsecK] = sub[1];\n                cartList[key].sections[secKey] = JSParsedInfo;\n              }\n            }\n          }\n\n          if (!classExist) {\n            var classSec = classData.sections;\n\n            for (const sec of Object.entries(classSec)) {\n              if (secKey === sec[0]) {\n                var jstring = JSON.stringify(classData);\n                let secInformation = JSON.parse(jstring);\n                secInformation.sections = {};\n                secInformation.sections[secKey] = sec[1];\n                cartList[key] = secInformation;\n                break;\n              }\n            }\n\n            var cartsec = cartList[key].sections[secKey];\n            var parseString = JSON.stringify(cartsec);\n            let JSParsedInfo = JSON.parse(parseString);\n            JSParsedInfo.subsections = {};\n            JSParsedInfo.subsections[subsecK] = sub[1];\n            cartList[key].sections[secKey] = JSParsedInfo;\n          }\n        }\n      }\n    }\n\n    return cartList;\n  }\n\n  removeCart(key, classData, cartList, secK, subsecK) {\n    if (secK === \"0\") {\n      delete cartList[key];\n    } else if (subsecK === \"0\") {\n      var cartkeyList = cartList[key].sections;\n\n      if (Object.entries(cartkeyList).length === 1) {\n        delete cartList[key];\n      } else {\n        var cartListString = JSON.stringify(cartList[key]);\n        let JSParsedInfo = JSON.parse(cartListString);\n        delete JSParsedInfo.sections[secK];\n        cartList[key] = JSParsedInfo;\n      }\n    } else {\n      let secKey = secK.key;\n      var subList = cartList[key].sections[secKey].subsections;\n\n      if (Object.entries(subList).length === 1) {\n        var cartListSec = cartList[key].sections;\n\n        if (Object.entries(cartListSec).length === 1) {\n          delete cartList[key];\n        } else {\n          var ck = cartList[key];\n          var jstring = JSON.stringify(ck);\n          let JSParsedInfo = JSON.parse(jstring);\n          delete JSParsedInfo.sections[secKey];\n          cartList[key] = JSParsedInfo;\n        }\n      } else {\n        var ck = cartList[key];\n        var jstring = JSON.stringify(ck);\n        let secInformation = JSON.parse(jstring);\n        delete secInformation.sections[secKey].subsections[subsecK];\n        cartList[key] = secInformation;\n      }\n    }\n\n    return cartList;\n  }\n\n}\n\nexport default Cart;","map":{"version":3,"sources":["/Users/kunlunwang/Downloads/test/src/Cart.js"],"names":["Cart","addCourse","key","classData","cartList","secK","subsecK","s","sections","sec","Object","entries","classExist","classes","jstring","JSON","stringify","JSParsedInfo","parse","secKey","d","subsections","sub","secFound","secs","secInformation","secNum","secInfo","classSec","cartsec","parseString","removeCart","cartkeyList","length","cartListString","subList","cartListSec","ck"],"mappings":"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","sourcesContent":["class Cart {\n\t\n\n\n\t\n\t\n\taddCourse(key, classData, cartList, secK, subsecK) {\n        \n        if(secK === \"0\") {\n\t\t\tcartList[key] = classData;\n        } \n        else if (subsecK === \"0\") {\n            var s = classData.sections;\n\t\t\tfor(const sec of Object.entries(s)) {\n\t\t\t\tif(secK === sec[0]) {\n\t\t\t\t\tlet classExist = false;\n\t\t\t\t\tfor(const classes of Object.entries(cartList)) {\n\n\n\t\t\t\t\t\tif(key === classes[0]) {\n                            classExist = true;\n                            var jstring = JSON.stringify(classes[1])\n\t\t\t\t\t\t\tlet JSParsedInfo = JSON.parse(jstring);\n\t\t\t\t\t\t\tJSParsedInfo.sections[secK] = sec[1];\n\t\t\t\t\t\t\tcartList[key] = JSParsedInfo;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\tif(!classExist) {\n\n\t\t\t\t\t\t\n                        var jstring = JSON.stringify(classData)\n\t\t\t\t\t\tlet JSParsedInfo = JSON.parse(jstring);\n\t\t\t\t\t\t\n\t\t\t\t\t\tJSParsedInfo.sections = {};\n\n\n\t\t\t\t\t\tJSParsedInfo.sections[secK] = sec[1];\n\n\t\t\t\t\t\tcartList[key] = JSParsedInfo;\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n            \n\n        } \n        \n        else {\n            let secKey = secK.key;\n            var d = classData.sections[secKey].subsections;\n\t\t\tfor(const sub of Object.entries(d)) {\n\n            \n    \n\t\t\t\tif(subsecK === sub[0]) {\n                    \n                    let classExist = false;\n                   \n\t\t\t\t\tlet secFound = false;\n\t\t\t\t\t\n\n\t\t\t\t\tfor(const classes of Object.entries(cartList)) {\n\n\n\t\t\t\t\t\tif(key === classes[0]) {\n\t\t\t\t\t\t\tclassExist = true;\n\n\t\t\t\t\t\t\tvar secs = classes[1].sections;\n\t\t\t\t\t\t\tfor(const sec of Object.entries(secs)) {\n                                \n\n\t\t\t\t\t\t\t\tif(secKey === sec[0]) {\n                                    secFound = true;\n\t\t\t\t\t\t\t\t\tvar jstring = JSON.stringify(sec[1]);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlet JSParsedInfo = JSON.parse(jstring);\n\n\t\t\t\t\t\t\t\t\tJSParsedInfo.subsections[subsecK] = sub[1];\n\n\t\t\t\t\t\t\t\t\tcartList[key].sections[secKey] = JSParsedInfo;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(!secFound) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar jstring = JSON.stringify(classes[1]);\n\t\t\t\t\t\t\t\tlet secInformation = JSON.parse(jstring);\n\t\t\t\t\t\t\t\tsecInformation.sections[secKey] = classData.sections[secKey];\n\t\t\t\t\t\t\t\tcartList[key] = secInformation;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar secNum = cartList[key].sections[secKey]\n\t\t\t\t\t\t\t\tvar secInfo = JSON.stringify(secNum)\n\t\t\t\t\t\t\t\tlet JSParsedInfo = JSON.parse(secInfo);\n\n\t\t\t\t\t\t\t\tJSParsedInfo.subsections = {};\n\n\t\t\t\t\t\t\t\tJSParsedInfo.subsections[subsecK] = sub[1];\n\n\t\t\t\t\t\t\t\tcartList[key].sections[secKey] = JSParsedInfo;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(!classExist) {\n\n\t\t\t\t\t\tvar classSec = classData.sections; \n\t\t\t\t\t\tfor(const sec of Object.entries(classSec)) {\n\n\t\t\t\t\t\t\tif(secKey === sec[0]) {\n\n\t\t\t\t\t\t\t\tvar jstring = JSON.stringify(classData); \n\n\t\t\t\t\t\t\t\tlet secInformation = JSON.parse(jstring);\n\n\t\t\t\t\t\t\t\tsecInformation.sections = {};\n\n\t\t\t\t\t\t\t\tsecInformation.sections[secKey] = sec[1];\n\n\t\t\t\t\t\t\t\tcartList[key] = secInformation;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar cartsec = cartList[key].sections[secKey]\n\t\t\t\t\t\tvar parseString = JSON.stringify(cartsec)\n\t\t\t\t\t\tlet JSParsedInfo = JSON.parse(parseString);\n\n\t\t\t\t\t\tJSParsedInfo.subsections = {};\n\n\t\t\t\t\t\tJSParsedInfo.subsections[subsecK] = sub[1];\n\n\t\t\t\t\t\tcartList[key].sections[secKey] = JSParsedInfo;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cartList;\n\t}\n\t\n\tremoveCart(key, classData, cartList, secK, subsecK) {\n\n\t\tif(secK === \"0\") {\n\t\t\tdelete cartList[key];\n\n\t\t} else if (subsecK === \"0\") {\n\n\t\t\tvar cartkeyList = cartList[key].sections;\n\n\t\t\tif(Object.entries(cartkeyList).length === 1) {\n\n\t\t\t\tdelete cartList[key];\n\n\t\t\t} \n\t\t\telse {\n\t\t\t\tvar cartListString = JSON.stringify(cartList[key]);\n\t\t\t\tlet JSParsedInfo = JSON.parse(cartListString);\n\n\t\t\t\tdelete JSParsedInfo.sections[secK];\n\t\t\t\tcartList[key] = JSParsedInfo;\n\t\t\t}\n\n\t\t} \n\t\t\n\t\telse {\n\n\t\t\tlet secKey = secK.key;\n\t\t\t\n\t\t\tvar subList = cartList[key].sections[secKey].subsections; \n\n\t\t\tif(Object.entries(subList).length === 1) {\n\n\t\t\t\tvar cartListSec = cartList[key].sections; \n\n\t\t\t\tif(Object.entries(cartListSec).length === 1) {\n\n\t\t\t\t\tdelete cartList[key];\n\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\telse {\n\t\t\t\t\tvar ck = cartList[key]\n\t\t\t\t\tvar jstring = JSON.stringify(ck)\n\t\t\t\t\tlet JSParsedInfo = JSON.parse(jstring);\n\t\t\t\t\tdelete JSParsedInfo.sections[secKey];\n\t\t\t\t\tcartList[key] = JSParsedInfo;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse {\n\n\t\t\t\tvar ck = cartList[key]\n\t\t\t\tvar jstring = JSON.stringify(ck);\n\n\t\t\t\tlet secInformation = JSON.parse(jstring);\n\n\t\t\t\tdelete secInformation.sections[secKey].subsections[subsecK];\n\n\t\t\t\tcartList[key] = secInformation;\n\t\t\t}\n\t\t}\n\t\treturn cartList;\n\t}\n}\n\nexport default Cart;\n"]},"metadata":{},"sourceType":"module"}